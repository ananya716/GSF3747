Go to https://docs.conda.io/projects/miniconda/en/latest/index.html
Copy link of miniconda Miniconda3 Linux 64-bit with right mouse click - copy link
cd /N/slate/amahapat
wget ctrl+shift+V
# To run it,
bash Miniconda3-latest-Linux-x86_64.sh
/N/slate/amahapat/miniconda3
yes
yes
# Then close ThinLinc fully and reopen 

conda create -n pathogenripseq -c conda-forge -c bioconda samtools bedtools

conda activate pathogenripseq

# On Hundley Lab Project Space- 

scp GSF3747-OP50-3XFLAG-ADR-1-input* /N/slate/amahapat/pathogen 
scp GSF3747-OP50-adr-1-input* /N/slate/amahapat/pathogen
scp GSF3747-PA14-3XFLAG-ADR-1-input* /N/slate/amahapat/pathogen
scp GSF3747-PA14-adr-1-input* /N/slate/amahapat/pathogen

gunzip GSF3747*

ASSEMBLY='ftp://ftp.wormbase.org/pub/wormbase/releases/WS275/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS275.genomic.fa.gz'
ANNOTATION='ftp://ftp.wormbase.org/pub/wormbase/releases/WS275/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS275.canonical_geneset.gtf.gz'

################################
## Generate STAR Genome Index ##
################################

# Make a directory to store the genome files.

mkdir -p genome

# Download and unpack the genome assembly.

curl $ASSEMBLY | gunzip > ./genome/assembly.fasta

# Download and unpack the genome annotation.

curl $ANNOTATION | gunzip > ./genome/annotation.gtf

# Create a directory to store the index.

mkdir -p genome/index

# Create the STAR genome index.

module load star

STAR \
  --runThreadN 4 \
  --runMode genomeGenerate \
  --genomeDir genome/index \
  --genomeFastaFiles genome/assembly.fasta \
  --sjdbGTFfile genome/annotation.gtf \
  --genomeSAindexNbases 12

###########################
## Align Reads to Genome ##
###########################

# Create an output directory for aligned reads.

mkdir -p results/aligned

FASTQ=$GSF3747-OP50*   #sometimes that doesn't work, do it for individual files instead

for FASTQ in ${FASTQ[@]}; do
  PREFIX=results/aligned/$(basename $FASTQ .fastq)_
  STAR \
    --runThreadN 8 \
    --outFilterMultimapNmax 1 \
    --outFilterScoreMinOverLread .66 \
    --outFilterMismatchNmax 10 \
    --outFilterMismatchNoverLmax .3 \
    --runMode alignReads \
    --genomeDir genome/index \
    --readFilesIn $FASTQ \
    --outFileNamePrefix $PREFIX \
    --outSAMattributes All \
    --outSAMtype BAM SortedByCoordinate
done

# Indexing the BAM files.

BAMS=($(find ./results/aligned -name "*\.bam"))

for BAM in ${BAMS[@]}; do
  samtools index $BAM
  done

#remove genome* and results* files
  
  ####################
## Count Features ##
####################

# Create an output directory for read counts.

mkdir -p results/counts

conda create -n featurecounts -c bioconda subread

conda install bioconda::bioconductor-rsubread

# Count reads.

BAMS=$(find ./results/aligned -name "*\.bam")

featureCounts \
  -a genome/annotation.gtf \
  -o results/counts/counts.tsv \
  -t gene \
  -g gene_id \
  --largestOverlap \
  --readExtension3 150 \
  --primary \
  -s 2 \
  -T 8 \
  ${BAMS}

#Transfer file to desktop

On local terminal, type cd Desktop
scp amahapat@quartz.uits.iu.edu:/N/slate/amahapat/pathogen/results/counts/counts.tsv .

Proceeded to do DESeq2 on R studio

library(tidyverse)
> library(DESeq2)
> countdata <- read.table("/Users/ananyamahapatra/Desktop/CS inputs counts.tsv", header=TRUE,row.names = 1)
> countdata <- read.table("/Users/ananyamahapatra/Desktop/CS inputs counts.tsv", header=TRUE,row.names = 1)
> countdata <- countdata[,6:ncol(countdata)]
> colnames(countdata)
[1] "OP50.3XFLAG.ADR.1.input.rep1" "OP50.3XFLAG.ADR.1.input.rep2"
[3] "OP50.3XFLAG.ADR.1.input.rep4" "OP50.adr.1.input.rep1"       
[5] "OP50.adr.1.input.rep2"        "OP50.adr.1.input.rep4"       
> countdata <- as.matrix(countdata)
> countdata <- countdata[,c("OP50.adr.1.input.rep1","OP50.adr.1.input.rep2","OP50.adr.1.input.rep4","OP50.3XFLAG.ADR.1.input.rep1","OP50.3XFLAG.ADR.1.input.rep2","OP50.3XFLAG.ADR.1.input.rep4")]
> (condition <- factor(c(rep("b",3),rep("a",3))))
[1] b b b a a a
Levels: a b
> (coldata <- data.frame(row.names=colnames(countdata),condition))
                             condition
OP50.adr.1.input.rep1                b
OP50.adr.1.input.rep2                b
OP50.adr.1.input.rep4                b
OP50.3XFLAG.ADR.1.input.rep1         a
OP50.3XFLAG.ADR.1.input.rep2         a
OP50.3XFLAG.ADR.1.input.rep4         a
> dds <- DESeqDataSetFromMatrix(countData = countdata,colData = coldata, design=~condition)
> keep = rowSums(counts(dds)) >= 1
> dds <- dds[keep,]
> dds <- DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> res <- results(dds)
> resdata <- merge(as.data.frame(res),as.data.frame(counts(dds,normalized=TRUE)),by="row.names",sort=FALSE)
> 
> names(resdata)[1] <- "Gene"
> write.csv(resdata,file="/Users/ananyamahapatra/Desktop/3XFLAGvsadr-1diffexp.csv")
